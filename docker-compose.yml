version: '3.8'
services:
  db:
    image: postgres
    volumes:
      - dbdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    pull_policy: build
    restart: unless-stopped
    hostname: chef-db
    networks:
      - pgadmin-net
      - local-net
  redis:
    image: redis:latest
    restart: unless-stopped
    expose:
      - '6379:6379'
    networks:
      - local-net
  web:
    build: .
    pull_policy: build
    restart: unless-stopped
    depends_on:
      - db
      - redis
    environment:
      RECIPE_REPO_USER: ${RECIPE_REPO_USER}
      RECIPE_REPO_NAME: ${RECIPE_REPO_NAME}
      RECIPE_PAT: ${RECIPE_PAT}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      PASSWORD: ${PASSWORD}
      ADMIN_USER: ${ADMIN_USER}
      SECRET: ${SECRET}
      INSTAGRAM_USER: ${INSTAGRAM_USER}
      INSTAGRAM_PASS: ${INSTAGRAM_PASS}
      IMGUR_ALBUM_ID: ${IMGUR_ALBUM_ID}
      IMGUR_CLIENT_ID: ${IMGUR_CLIENT_ID}
      IMGUR_CLIENT_SECRET: ${IMGUR_CLIENT_SECRET}
      IMGUR_REFRESH_TOKEN: ${IMGUR_REFRESH_TOKEN}
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      PORT: 5000
      PYTHONUNBUFFERED: 1
    networks:
      - local-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.chef-web.rule=Host(`chef.dennishilhorst.nl`)"
      - "traefik.http.routers.chef-web.entrypoints=websecure"
      - "traefik.http.routers.chef-web.tls.certresolver=myresolver"
      - "traefik.http.services.chef-web.loadbalancer.server.port=5000"
volumes:
  dbdata:
networks:
  pgadmin-net:
    external: true
  local-net:
